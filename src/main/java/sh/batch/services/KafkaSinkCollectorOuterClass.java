// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kafka-sink-collector.proto

package sh.batch.services;

/*-
 * #%L
 * sink-connector
 * %%
 * Copyright (C) 2020 Batch.sh
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

public final class KafkaSinkCollectorOuterClass {
  private KafkaSinkCollectorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_services_AddKafkaSinkRecordRequest_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_services_AddKafkaSinkRecordRequest_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_services_AddKafkaSinkRecordResponse_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_services_AddKafkaSinkRecordResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032kafka-sink-collector.proto\022\010services\032\023" +
      "events/status.proto\032\032events/records/kafk" +
      "a.proto\"F\n\031AddKafkaSinkRecordRequest\022)\n\007" +
      "records\030\001 \003(\0132\030.records.KafkaSinkRecord\"" +
      "[\n\032AddKafkaSinkRecordResponse\022\035\n\025num_rec" +
      "ords_processed\030\001 \001(\003\022\036\n\006status\030\002 \001(\0132\016.e" +
      "vents.Status2l\n\022KafkaSinkCollector\022V\n\tAd" +
      "dRecord\022#.services.AddKafkaSinkRecordReq" +
      "uest\032$.services.AddKafkaSinkRecordRespon" +
      "seBA\n\021sh.batch.servicesP\001Z*github.com/ba",
      "tch/schemas/build/go/servicesb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          sh.batch.events.ResponseStatus.getDescriptor(),
          sh.batch.events.records.Kafka.getDescriptor(),
        }, assigner);
    internal_static_services_AddKafkaSinkRecordRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_services_AddKafkaSinkRecordRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_services_AddKafkaSinkRecordRequest_descriptor,
        new java.lang.String[] { "Records", });
    internal_static_services_AddKafkaSinkRecordResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_services_AddKafkaSinkRecordResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_services_AddKafkaSinkRecordResponse_descriptor,
        new java.lang.String[] { "NumRecordsProcessed", "Status", });
    sh.batch.events.ResponseStatus.getDescriptor();
    sh.batch.events.records.Kafka.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
